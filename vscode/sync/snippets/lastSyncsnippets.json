{"ref":"f97f5ce0-4a7e-4ef3-8e31-d646e2a8cbf4","content":"{\"version\":1,\"machineId\":\"3e5f599c-8873-437e-bab5-fe823da49459\",\"content\":\"{\\\"cpp.json\\\":\\\"// {\\\\n// \\\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\\\n// \\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\n// \\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\\\n// \\\\t// same ids are connected.\\\\n// \\\\t// Example:\\\\n// \\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\n// \\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\n// \\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n// \\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\n// \\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\n// \\\\t// \\\\t],\\\\n// \\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\n// \\\\t// }\\\\n// },\\\\n\\\\n{\\\\n\\\\t\\\\\\\"modint\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"modint\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\t// modint: mod 計算を int を扱うように扱える構造体\\\\n\\\\t\\\\t\\\\t\\\\\\\"template<int MOD> struct Fp {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tlong long val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp(long long v = 0) noexcept : val(v % MOD) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tif (val < 0) val += MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr int getmod() { return MOD; }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp operator - () const noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn val ? MOD - val : 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp operator + (const Fp& r) const noexcept { return Fp(*this) += r; }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp operator - (const Fp& r) const noexcept { return Fp(*this) -= r; }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp operator * (const Fp& r) const noexcept { return Fp(*this) *= r; }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp operator / (const Fp& r) const noexcept { return Fp(*this) /= r; }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp& operator += (const Fp& r) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tval += r.val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tif (val >= MOD) val -= MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn *this;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp& operator -= (const Fp& r) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tval -= r.val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tif (val < 0) val += MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn *this;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp& operator *= (const Fp& r) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tval = val * r.val % MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn *this;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr Fp& operator /= (const Fp& r) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tlong long a = r.val, b = MOD, u = 1, v = 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\twhile (b) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\t\\\\tlong long t = a / b;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\t\\\\ta -= t * b; swap(a, b);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\t\\\\tu -= t * v; swap(u, v);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tval = val * u % MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tif (val < 0) val += MOD;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn *this;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr bool operator == (const Fp& r) const noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn this->val == r.val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tconstexpr bool operator != (const Fp& r) const noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn this->val != r.val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tfriend constexpr ostream& operator << (ostream &os, const Fp<MOD>& x) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn os << x.val;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\tfriend constexpr Fp<MOD> modpow(const Fp<MOD> &a, long long n) noexcept {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tif (n == 0) return 1;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tauto t = modpow(a, n / 2);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tt = t * t;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\tif (n & 1) t = t * a;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t\\\\treturn t;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\t}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"};\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"using mint = Fp<1000000007>;\\\\\\\"\\\\n\\\\t\\\\t],\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"modint\\\\\\\"\\\\n\\\\t}\\\\n},\\\\n\\\\n\\\\\\\"Print to console\\\\\\\": {\\\\n\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"main\\\\\\\",\\\\n\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\\\\"#include <bits/stdc++.h>\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"using namespace std;\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"int main() {\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"  int n,m;\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"  cin >> n >> m;\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"  \\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"  int r = 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"  cout << r << endl;\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"}\\\\\\\",\\\\n\\\\t],\\\\n\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Main Template\\\\\\\"\\\\n}\\\\n\\\\n\\\\n\\\"}\"}"}