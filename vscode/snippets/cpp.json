// {
// 	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
// 	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// 	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
// 	// same ids are connected.
// 	// Example:
// 	// "Print to console": {
// 	// 	"prefix": "log",
// 	// 	"body": [
// 	// 		"console.log('$1');",
// 	// 		"$2"
// 	// 	],
// 	// 	"description": "Log output to console"
// 	// }
// },

{
	"modint": {
		"prefix": "modint",
		"body": [
			// modint: mod 計算を int を扱うように扱える構造体
			"template<int MOD> struct Fp {",
			"	long long val;",
			"	constexpr Fp(long long v = 0) noexcept : val(v % MOD) {",
			"		if (val < 0) val += MOD;",
			"	}",
			"	constexpr int getmod() { return MOD; }",
			"	constexpr Fp operator - () const noexcept {",
			"		return val ? MOD - val : 0;",
			"	}",
			"	constexpr Fp operator + (const Fp& r) const noexcept { return Fp(*this) += r; }",
			"	constexpr Fp operator - (const Fp& r) const noexcept { return Fp(*this) -= r; }",
			"	constexpr Fp operator * (const Fp& r) const noexcept { return Fp(*this) *= r; }",
			"	constexpr Fp operator / (const Fp& r) const noexcept { return Fp(*this) /= r; }",
			"	constexpr Fp& operator += (const Fp& r) noexcept {",
			"		val += r.val;",
			"	if (val >= MOD) val -= MOD;",
			"		return *this;",
			"	}",
			"	constexpr Fp& operator -= (const Fp& r) noexcept {",
			"		val -= r.val;",
			"		if (val < 0) val += MOD;",
			"		return *this;",
			"	}",
			"	constexpr Fp& operator *= (const Fp& r) noexcept {",
			"		val = val * r.val % MOD;",
			"		return *this;",
			"	}",
			"	constexpr Fp& operator /= (const Fp& r) noexcept {",
			"		long long a = r.val, b = MOD, u = 1, v = 0;",
			"		while (b) {",
			"			long long t = a / b;",
			"			a -= t * b; swap(a, b);",
			"			u -= t * v; swap(u, v);",
			"		}",
			"		val = val * u % MOD;",
			"		if (val < 0) val += MOD;",
			"		return *this;",
			"	}",
			"	constexpr bool operator == (const Fp& r) const noexcept {",
			"		return this->val == r.val;",
			"	}",
			"	constexpr bool operator != (const Fp& r) const noexcept {",
			"		return this->val != r.val;",
			"	}",
			"	friend constexpr ostream& operator << (ostream &os, const Fp<MOD>& x) noexcept {",
			"		return os << x.val;",
			"	}",
			"	friend constexpr Fp<MOD> modpow(const Fp<MOD> &a, long long n) noexcept {",
			"		if (n == 0) return 1;",
			"		auto t = modpow(a, n / 2);",
			"		t = t * t;",
			"		if (n & 1) t = t * a;",
			"		return t;",
			"	}",
			"};",
			"using mint = Fp<1000000007>;"
		],
		"description": "modint"
	}
},

"Print to console": {
	"prefix": "main",
	"body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"int main() {",
		"  int n,m;",
		"  cin >> n >> m;",
		"  ",
		"  int r = 0;",
		"  cout << r << endl;",
		"}",
	],
	"description": "Main Template"
}


